% Encoding: UTF-8

@book{goll_entwurfsprinzipien,
	address = {Wiesbaden},
	title = {Entwurfsprinzipien und {Konstruktionskonzepte} der {Softwaretechnik}: {Strategien} für schwach gekoppelte, korrekte und stabile {Software}},
	isbn = {978-3-658-20054-1 978-3-658-20055-8},
	shorttitle = {Entwurfsprinzipien und {Konstruktionskonzepte} der {Softwaretechnik}},
	language = {de},
	publisher = {Springer Vieweg},
	author = {Goll, Joachim},
	year = {2018},
	note = {OCLC: 1022114526},
	file = {Goll - 2018 - Entwurfsprinzipien und Konstruktionskonzepte der S.pdf:/home/mika/Zotero/storage/W2P96DVY/Goll - 2018 - Entwurfsprinzipien und Konstruktionskonzepte der S.pdf:application/pdf}
}
@book{Jeffries,
  title={Extreme Programming Installed},
  author={Ron Jeffries and Ann Anderson and Chet Hendrickson},
  year={2000},
  publisher={Addison-Wesley}
}
@book{hunt, 
   author = {Hunt, Andrew and Thomas, David}, 
   title = {{Der Pragmatische Programmierer}}, 
   publisher = {Fachbuchverlag Leipzig im Carl Hanser Verlag}, 
   isbn = {3446223096, 978-3446223097}, 
   year = {2003}, 
   quality = {5}, 
   note = {}
}


@article{stoica,
	title = {Software {Development}: {Agile} vs. {Traditional}},
	volume = {17},
	issn = {14531305, 18428088},
	shorttitle = {Software {Development}},
	url = {http://www.revistaie.ase.ro/content/68/06%20-%20Stoica,%20Mircea,%20Ghilic.pdf},
	doi = {10.12948/issn14531305/17.4.2013.06},
	abstract = {Organizations face the need to adapt themselves to a complex business environment, in continuous change and transformation. Under these circumstances, organization agility is a key element in gaining strategic advantages and market success. Achieving and maintaining agility requires agile architectures, techniques, methods and tools, able to react in real time to change requirements. This paper proposes an incursion in the software development, from traditional to agile.},
	language = {en},
	number = {4/2013},
	urldate = {2020-02-10},
	author = {Stoica, Marian and Mircea, Marinela and Ghilic-Micu, Bogdan},
	month = dec,
	year = {2013},
	pages = {64--76},
}


@article{pairprogramming,
	title = {Strengthening the case for pair programming},
	volume = {17},
	issn = {07407459},
	url = {http://ieeexplore.ieee.org/document/854064/},
	doi = {10.1109/52.854064},
	abstract = {Pair programming – two programmers working side-by-side at one computer collaborating on the same design, algorithm, code or test – has been practiced in industry with great success for years. Higher quality products are produced faster. Yet, most who have not tried and tested pairprogramming reject the idea immediately as an overtly redundant, wasteful use of programming resources. The purpose of this article is to demonstrate through anecdotal, qualitative and quantitative evidence, that incorporating pair-programming into a software development process will help yield software products of better quality in less time with happier, more confident programmers. Supportive evidence comes from professional programmers and from the results of a structured experiment run with advanced undergraduate students at the University of Utah.},
	language = {en},
	number = {4},
	urldate = {2020-02-23},
	journal = {IEEE Software},
	author = {Williams, L. and Kessler, R.R. and Cunningham, W. and Jeffries, R.},
	month = aug,
	year = {2000},
	pages = {19--25},
	file = {Williams et al. - 2000 - Strengthening the case for pair programming.pdf:/home/mika/Zotero/storage/XWAG4KNZ/Williams et al. - 2000 - Strengthening the case for pair programming.pdf:application/pdf}
}

@inproceedings{Beck2013,
  title={Manifesto for Agile Software Development},
  author={Kent M. Beck and Mike Beedle and Arie van Bennekum and Alistair Cockburn and Ward Cunningham and Martin Fowler and James Grenning and Jim Highsmith and Andy Hunt and Ron Jeffries and Jon Kern and Brian Marick and R. C. Martin and Steve J. Mellor and Ken Schwaber and Jeff Sutherland and Dave Thomas},
  year={2013}
}

@article{balaji_wateerfallvs_2012,
	title = {{WATEERFALLVs} {V}-{MODEL} {Vs} {AGILE}: {A} {COMPARATIVE} {STUDY} {ON} {SDLC}},
	url = {https://pdfs.semanticscholar.org/8d2a/ad803781a34a43af447cea410cd710b9f1f5.pdf},
	abstract = {Organizations that are developing software solution are faced with the difficult choice of picking the right software development life cycle (SDLC). The waterfall model is a sequential design process, often used in software development processes, in which progress is seen as flowing steadily downwards (like a waterfall) through the phases. The V-model represents a software development process which may be considered an extension of the waterfall model. Instead of moving down in a linear way, the process steps are bent upwards after the coding phase, to form the typical V shape Agile Modeling is a practice-based methodology for modelling and documentation of software-based systems. It is intended to be a collection of values, principles, and practices for modelling software that can be applied on a software development project in a more flexible manner than traditional Modelling methods. This comparative summarizes the steps an organization would have to go through in order to make the best possible choice.},
	language = {en},
	number = {1},
	journal = {. Vol.},
	author = {Balaji, S},
	year = {2012},
	pages = {6},
	file = {Balaji - 2012 - WATEERFALLVs V-MODEL Vs AGILE A COMPARATIVE STUDY.pdf:/home/mika/Zotero/storage/TDQFTQMZ/Balaji - 2012 - WATEERFALLVs V-MODEL Vs AGILE A COMPARATIVE STUDY.pdf:application/pdf}
	
}

@article{beck1999,
	title = {Embracing change with extreme programming},
	volume = {32},
	issn = {00189162},
	url = {http://ieeexplore.ieee.org/document/796139/},
	doi = {10.1109/2.796139},
	language = {en},
	number = {10},
	urldate = {2020-03-10},
	journal = {Computer},
	author = {Beck, K.},
	month = oct,
	year = {1999},
	pages = {70--77},
	file = {Beck - 1999 - Embracing change with extreme programming.pdf:/home/mika/Zotero/storage/XR4GLYT2/Beck - 1999 - Embracing change with extreme programming.pdf:application/pdf}
}

@Comment{jabref-meta: databaseType:bibtex;}